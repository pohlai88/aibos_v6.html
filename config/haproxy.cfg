# HAProxy Configuration for Distributed Security Services
# Load balancing with health checks, circuit breakers, and monitoring

global
    # Logging
    log stdout format raw local0 info
    
    # Security
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    stats timeout 30s
    user haproxy
    group haproxy
    
    # Performance
    daemon
    maxconn 50000
    nbproc 1
    nbthread 4
    cpu-map auto:1/1-4 0-3
    
    # SSL/TLS
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11

defaults
    # Logging
    log global
    mode http
    option httplog
    option dontlognull
    option http-server-close
    option forwardfor except 127.0.0.0/8
    option redispatch
    
    # Timeouts
    timeout connect 5000
    timeout client 50000
    timeout server 50000
    timeout http-request 10s
    timeout http-keep-alive 10s
    timeout check 5s
    
    # Retries
    retries 3
    
    # Health checks
    option httpchk GET /health HTTP/1.1\r\nHost:\ aibos.com\r\nUser-Agent:\ HAProxy-Health-Check/1.0
    http-check expect status 200
    
    # Error handling
    option abortonclose
    option accept-invalid-http-request

# Stats interface
frontend stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats auth admin:aibos_admin_password
    stats show-legends
    stats show-node
    stats scope .

# Main application frontend
frontend aibos_security_frontend
    bind *:8080
    mode http
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    http-response set-header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 100 }
    
    # Request validation
    http-request deny if { path,field(1,/) -m sub admin }
    http-request deny if { path,field(1,/) -m sub internal }
    
    # Load balancing
    default_backend aibos_security_backend
    
    # ACLs for different services
    acl is_health path /health
    acl is_metrics path /metrics
    acl is_api path_beg /api
    
    # Routing
    use_backend aibos_health_backend if is_health
    use_backend aibos_metrics_backend if is_metrics
    use_backend aibos_api_backend if is_api

# Health check backend
backend aibos_health_backend
    mode http
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server security-audit-1 security-audit-1:8080 check weight 1 maxconn 1000
    server security-audit-2 security-audit-2:8080 check weight 1 maxconn 1000
    server security-audit-3 security-audit-3:8080 check weight 1 maxconn 1000

# Metrics backend
backend aibos_metrics_backend
    mode http
    balance roundrobin
    option httpchk GET /metrics
    http-check expect status 200
    
    server security-audit-1 security-audit-1:9090 check weight 1 maxconn 500
    server security-audit-2 security-audit-2:9090 check weight 1 maxconn 500
    server security-audit-3 security-audit-3:9090 check weight 1 maxconn 500

# Main API backend
backend aibos_security_backend
    mode http
    balance leastconn
    
    # Health checks
    option httpchk GET /health
    http-check expect status 200
    
    # Circuit breaker configuration
    option redispatch
    retries 3
    
    # Server configuration
    server security-audit-1 security-audit-1:8080 check weight 1 maxconn 1000 inter 5s rise 2 fall 3
    server security-audit-2 security-audit-2:8080 check weight 1 maxconn 1000 inter 5s rise 2 fall 3
    server security-audit-3 security-audit-3:8080 check weight 1 maxconn 1000 inter 5s rise 2 fall 3
    
    # Backup servers (if needed)
    # server security-audit-4 security-audit-4:8080 check weight 1 maxconn 1000 inter 5s rise 2 fall 3 backup
    
    # Error handling
    http-request deny if { srv_conn gt 1000 }
    http-request deny if { srv_queue gt 100 }

# API-specific backend
backend aibos_api_backend
    mode http
    balance leastconn
    
    # Health checks
    option httpchk GET /health
    http-check expect status 200
    
    # Server configuration with different weights for API traffic
    server security-audit-1 security-audit-1:8080 check weight 2 maxconn 500 inter 5s rise 2 fall 3
    server security-audit-2 security-audit-2:8080 check weight 2 maxconn 500 inter 5s rise 2 fall 3
    server security-audit-3 security-audit-3:8080 check weight 1 maxconn 500 inter 5s rise 2 fall 3
    
    # API-specific error handling
    http-request deny if { path,field(1,/) -m sub admin }
    http-request deny if { path,field(1,/) -m sub internal }
    
    # Rate limiting for API
    stick-table type ip size 100k expire 60s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 50 }

# Monitoring and alerting
listen aibos_monitoring
    bind *:8405
    mode http
    stats enable
    stats uri /monitoring
    stats refresh 10s
    stats admin if TRUE
    stats auth admin:aibos_admin_password
    stats show-legends
    stats show-node
    stats scope .
    
    # Custom monitoring endpoints
    http-request use-service prometheus-exporter if { path /metrics }
    http-request use-service health-checker if { path /health } 