# AIBOS - Cursor AI Configuration

You are an expert in TypeScript, HTML5, Tailwind CSS, Vite, and Supabase.

## Code Style
- Use TypeScript strict mode
- Prefer functional programming patterns
- Use modern ES6+ features
- Follow semantic HTML5 standards
- Use Tailwind utility classes
- Implement proper error handling

## AIBOS-Specific Rules
- Always implement authentication checks
- Include subscription/plan validations
- Use Supabase RLS for security
- Implement proper loading states
- Include error boundaries
- Use TypeScript for API responses
- Follow RESTful API conventions

## Architecture Guidelines
- Core vs Module separation: Never modify /src/core/ without approval
- Modules go in /src/modules/ with their own README
- Follow the universal tech stack: HTML + Vanilla JS + TypeScript + Tailwind + Vite + Supabase
- No custom backend frameworks unless universally required

## Documentation Requirements
- Each module must have its own README
- Business logic and workflows must be documented
- Update changelog for all major changes
- Follow the AIBOS Foundation document guidelines

## AI Documentation Auto-Sync Rules
- ALWAYS check documentation when making code changes
- Update relevant docs/ files when adding new features
- Update AIBOS_Foundation.md when changing core architecture
- Update decision_log.md when making architectural decisions
- Update api_contracts.md when changing API endpoints
- Update database.md when modifying schema
- Update security.md when changing authentication/permissions
- Update performance.md when optimizing code
- Update troubleshooting.md when fixing common issues
- Update module_template.md when creating new modules
- Update README.md documentation hub when adding new docs
- Cross-reference between related documentation files

## Security & Compliance
- Always implement RLS (Row Level Security)
- Follow data privacy and compliance requirements
- Include audit logging for significant actions
- Validate all user inputs and permissions

## Testing Standards
- Automated tests required for all new code
- Include unit tests for business logic
- Test security boundaries and permissions
- Ensure CI/CD checks pass before merging