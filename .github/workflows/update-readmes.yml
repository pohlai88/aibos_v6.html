name: Update READMEs

on:
  push:
    paths:
      - 'packages/modules/*/pyproject.toml'
      - 'packages/modules/*/domain/**'
      - 'packages/modules/*/services/**'
      - 'packages/modules/*/tests/**'
      - 'pyproject.toml'
      - 'scripts/update-readme.py'
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      module_path:
        description: 'Module path to update (e.g., packages/modules/ledger)'
        required: false
        default: ''
      version:
        description: 'Version to set'
        required: false
        default: ''
      description:
        description: 'Change description'
        required: false
        default: ''
      update_all:
        description: 'Update all modules (ignores module_path if true)'
        required: false
        default: false
        type: boolean

jobs:
  update-readmes:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for git operations
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install toml pydantic-settings structlog tenacity
    
    - name: Validate pyproject.toml
      run: |
        python validate_pyproject.py
      continue-on-error: true
    
    - name: Update READMEs
      id: update
      shell: bash
      run: |
        # Debug information
        echo "Event type: ${{ github.event_name }}"
        echo "Update all: '${{ github.event.inputs.update_all }}'"
        echo "Module path: '${{ github.event.inputs.module_path }}'"
        echo "Version: '${{ github.event.inputs.version }}'"
        echo "Description: '${{ github.event.inputs.description }}'"
        
        # Handle workflow dispatch events
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "Processing workflow dispatch event..."
          
          # Check if update_all is true
          if [[ "${{ github.event.inputs.update_all }}" == "true" ]]; then
            echo "Updating all modules..."
            python scripts/update-readme.py --all
            echo "update_type=all" >> $GITHUB_OUTPUT
            echo "✅ Successfully updated all modules"
          
          # Check if specific module parameters are provided
          elif [[ -n "${{ github.event.inputs.module_path }}" && -n "${{ github.event.inputs.version }}" && -n "${{ github.event.inputs.description }}" ]]; then
            echo "Updating specific module: ${{ github.event.inputs.module_path }}"
            python scripts/update-readme.py --manual "${{ github.event.inputs.module_path }}" "${{ github.event.inputs.version }}" "${{ github.event.inputs.description }}"
            echo "update_type=specific" >> $GITHUB_OUTPUT
            echo "✅ Successfully updated specific module"
          
          # Invalid parameters
          else
            echo "❌ Invalid manual update parameters"
            echo "Required parameters for manual update:"
            echo "  - module_path: '${{ github.event.inputs.module_path }}'"
            echo "  - version: '${{ github.event.inputs.version }}'"
            echo "  - description: '${{ github.event.inputs.description }}'"
            echo "Or set update_all=true to update all modules"
            exit 1
          fi
        
        # Handle push events (auto-update)
        else
          echo "Auto-updating all modules from pyproject.toml changes..."
          python scripts/update-readme.py --all
          echo "update_type=auto" >> $GITHUB_OUTPUT
          echo "✅ Successfully auto-updated all modules"
        fi
    
    - name: Check for changes
      id: changes
      shell: bash
      run: |
        if git diff --quiet; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected"
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected:"
          git diff --name-only
        fi
    
    - name: Commit and push changes
      if: steps.changes.outputs.has_changes == 'true' && github.event_name != 'workflow_dispatch'
      shell: bash
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "docs: Auto-update READMEs [skip ci]

        - Updated module READMEs with latest version information
        - Updated root README with module status table
        - Triggered by: ${{ github.event_name }}"
        git push
    
    - name: Create Pull Request
      if: steps.changes.outputs.has_changes == 'true' && github.event_name == 'workflow_dispatch'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "docs: Update READMEs via manual trigger"
        title: "docs: Update READMEs - ${{ github.event.inputs.description || 'Manual update' }}"
        body: |
          Automated README updates triggered by workflow dispatch.
          
          **Update Details:**
          - **Type:** ${{ steps.update.outputs.update_type }}
          - **Module:** ${{ github.event.inputs.module_path || 'All modules' }}
          - **Version:** ${{ github.event.inputs.version || 'Auto-detected' }}
          - **Description:** ${{ github.event.inputs.description || 'Auto-update' }}
          
          **Changes:**
          - Updated module READMEs with latest version information
          - Updated root README with module status table
          - Regenerated changelog entries
          
          This PR was automatically generated by the README update workflow.
        branch: update-readmes-${{ github.run_number }}
        delete-branch: true
        labels: "documentation,automated"
    
    - name: Comment on PR
      if: github.event_name == 'pull_request' && steps.changes.outputs.has_changes == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '📝 READMEs have been automatically updated with the latest module information.'
          })
    
    - name: Summary
      shell: bash
      run: |
        echo "## README Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Update Type:** ${{ steps.update.outputs.update_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Changes Detected:** ${{ steps.changes.outputs.has_changes }}" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ steps.changes.outputs.has_changes }}" == "true" ]]; then
          echo "- **Status:** ✅ READMEs updated successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status:** ℹ️ No changes needed" >> $GITHUB_STEP_SUMMARY 